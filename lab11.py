from collections import defaultdict
def create_bwt(text):
    cyclic_permutations = []
    for i in range(0, len(text)):
        cyclic_permutations.append(text[i:] + text[:i])
    cyclic_permutations = sorted(cyclic_permutations)
    bwt = ''.join(st[-1] for st in cyclic_permutations)
    return bwt

def reconstruct_text(bwt_string):
    last_col = list(bwt_string)
    first_col = sorted(last_col)

    text = "$"
    idx = 0
    next_symbol = last_col[idx]
    while next_symbol != "$":
        text = next_symbol + text
        symbol_count = 0
        for sym in last_col[:idx+1]:
            if sym == next_symbol:
                symbol_count += 1

        count = 0
        for i in range(1, len(first_col)):
            if first_col[i] == next_symbol:
                count += 1
                if count == symbol_count:
                    idx = i
                    break

        next_symbol = last_col[idx]

    return text


def preprocess_bwt(bwt):
    first_col = sorted(bwt)
    first_occurrence = {}
    for i, char in enumerate(first_col):
        if char not in first_occurrence:
            first_occurrence[char] = i

    count_matrix = []
    tally = defaultdict(int)
    for char in bwt:
        tally[char] += 1
        count_matrix.append(tally.copy())

    def annotate(column):
        counts = {}
        result = []
        for char in column:
            counts[char] = counts.get(char, 0) + 1
            result.append((char, counts[char]))
        return result

    last_annotated = annotate(bwt)
    first_annotated = annotate(first_col)

    last_to_first = {}
    used = defaultdict(list)
    for idx, item in enumerate(first_annotated):
        used[item].append(idx)
    for idx, item in enumerate(last_annotated):
        last_to_first[idx] = used[item].pop(0)

    return first_occurrence, count_matrix, last_to_first


def count_symbol(count_matrix, symbol, row):
    if row < 0:
        return 0
    return count_matrix[row].get(symbol, 0)


def bw_matching(bwt, pattern, first_occurrence, count_matrix, last_to_first):
    top = 0
    bottom = len(bwt) - 1
    while top <= bottom:
        if pattern:
            symbol = pattern[-1]
            pattern = pattern[:-1]
            top_count = count_symbol(count_matrix, symbol, top - 1)
            bottom_count = count_symbol(count_matrix, symbol, bottom)
            if bottom_count - top_count > 0:
                top = first_occurrence[symbol] + top_count
                bottom = first_occurrence[symbol] + bottom_count - 1
            else:
                return 0
        else:
            return bottom - top + 1
    return 0


def match_all(bwt_string, patterns):
    first_occurrence, count_matrix, last_to_first = preprocess_bwt(bwt_string)
    results = []
    for pat in patterns:
        count = bw_matching(bwt_string, pat, first_occurrence, count_matrix, last_to_first)
        results.append(count)
    return results

def read_dna_strings(filepath):
    with open(filepath, 'r') as file:
        content = file.read()
        dna_strings = content.split()
    return dna_strings


patterns = read_dna_strings("patterns.txt")
bwt = "TTCGTTCCAGAAAGGGTAGCGGATTTGAGATCACATGTTTGCAGAAGAATGTGTTTGCGAAGCCCTACATGTCATATGTCTCGTCCATACACTAAGCAAGTTAAGCATACGCGATCTAGGAGGTGATCCAGGATAGCCCAGGATTAGGAGCGTGAAAAACGGGCCCGCCGGATGCGTTTAGTTAGCAGTGTCCACCTGGGTACACTCACAACTTCATTGCCCGTTGGATATGTGGCTGTAGTCAATCACGGGATGGTGCGGACCGCATTAGAGCCGCAGTGACAAAGGATGGTGAGGTGGAGCGCCTATCGTTGTTACGATTACAACTTGTCATAAGGTATTTCGTCCGGCTGAAGAATCAACTGCTCCCGTGGAGCGGCTGATTCTACGTCCGGGGCCTTGCACCTATGTACTCTTATTTGATGCGGTGACTAAGTGCACAGCATTCTAAATTGTAGATAGAAACGCGTTTGTACCGTAATGCGTAACAGTGGGAATTCATATGGGCACCCGTCGCACATTGTCGTAGTATCGCGACAGACATTGTGTACGGGATTTTAGGCGCGTCACCCTCCAGTAGTCATGCAGATCCTGGCGTGGACATGGAAAGTGTACCTTACTGGCACTTGCCGGAACGTAAGTTGCGTGTGATAGAGGTAAATGGTATCGACGCTCCATTGGATTTATAGCATAGGACAATCTCCGCGTGAGCATTCTTGGGGGCGTCTGTTGTAGCAATATTTAGCCTTAAGAAGGGCAAACGCAGTTGAGATGGGCCACCCTTTGGTAAGCGATGTCAACTCTGACCTCTGTGAGTCGGTACTTTGCTAACCTCCTCACGACGCGGAGGTTCCGGGTCGCCACGAGCTATTCAGGCGGGCTCTTCATAGCGTTGGCCATGGTAGATACCCCTACCGTGTCGAATTGAGGGCAGATGCACCCTTAGTAACGTCAATCGTTTCTCATATACTCGTCGAATCTACACGCTCTTTAATATCAAACGCTAACATTTGAGGACAGTCGTCACCACAGTGGGGGATACGGGGTACCCGCTGGGCAGTTAAAAACCAAGGTAACTCTACTACTAAGGCGACGCGAGCGCAATCATCAATCTTTGCAAGATCCTCTCCTCCAAACCTGGGGCCGATCCCAAAGGGTTGTACCATTTAATACCAGCCATCGTAGCAATACAGTAGCTTCAAACCGCAGATTTTGCCTACAGTGACGAGCGTATTGGCCGCTCTCACTTCATAAGCGTGGATGACCAAACTTTACTTACCTGCTTACGTTCTCATATGTTGAGACGCAGCGTAAGTCCGCGTGTCTCGTAGTTCATTACTGATAGTAGTTGACTCCAGGGCAAAGATAATGGTTTTCTCCAGTAACCTAATAGCCTACCACCGGTATAACTTGAGGGCCGCAGGAGAAGGGGGAAAGCGCAGAGCTTAAGGACGTCCCAAGTGCGGTTGTCTAGGAAAAGGAACGGACGTCACGTCTGGCCACTGCGTTACACAGCCTGCGATGTAAGACCGCCAGGTTAGTCGAAACCTCGGTCACCTTTGTCGCTCTCTTTTCAACATAAGTCTGGGAAGGTCTGATATGCCAACAGACACGGCAACGCAGAAATTTGGAAACCGGCGTGTGTGCGCTAGAGTGTGGCACGTCGCCGGTCAGGCGCCCGTTGGTATTGTCCACAACACACGGTCGGGATATAGGACTTATAATTCATTCACGGTGTTATCAATACTTGATGTAGGTCCTAGAACGGAGGCGGCTACCGGATGTCAACGGGTCGTGTCACGGATGGTATACATTTGACACGGGAAGACACAAGGCCCAATGTTAAAGCATCTGTGAAAAAATACTTGGGCGGTTACGGTTCGTTTCGGATGTCGGGGTGTGAAGCGCTTTGTTTATGCTAGCTATTGTTCCGTTGGACAATTTGGTCACATCACCTCTATTGTGTTAGATCATCCCTTTAGTAAGAGTATGAGTCACATTAACACCGACAGGAGTGATACGGGCAAGACTCCAGTTCTATACGAGTAGTCCGGATAACCTCCCTCTATAGTGGGATCACTAAGGGGAGTTTCGTCCTTATCACTCCGAGTCGGCAAGCTCTGATCCAGTAAACGTGAGTATGACAGGTGACTTTCCGGGCCAGGTGACGACAATTCCATCGTGAATCCTACGAACGCGGGACACGTCGAGCATAACAGGCATTCTTCGAAGTTAAAAGCTACCGGTCAAGACTTTGCCATGTAGGGTTGTATGAATCTCACTTGCAAGGCCGGGGCGCGAAGAAGCTATTAAATACGTTAACTATGCGTGCGAGTTTGTAGTGGGTCACTCGAATACGACGTTTAGGACCAACGACCTGGCTTCGGCCCATTCCCCAATGCATAAACCTAATATTCTGTGTCCCCGAGCAAGTCGCTTACTGTGGAATCGGGCTACTCGTATCATGGCCCGACTCTCTGATAGTGTGGGTTCAGGCCACGCTCGTAAGGATATAACGTTGCCGGCGGGGCCGCAGAGGGCGGGCACACGATGACTGGGTAGGCTTCATCTGGATTGCCCAAGGCCGAGCACTCATGACCAGTAGGGCCGGGAAAGTGAGAGGGATGAAATCCTCAGCCACAATGGTGGAGATGAGTGACGTGTAGCTCGCCCTTGGCAAATTGATGGCCCCGGTCCGTCCACCCCGATTCTAAGATCTTTGGCGCTAAGACGCCATAGTAGCCCCTGAAGGTAACGCGCTAACCAGAAATGAACACATTTAATTATGGTGCGGAATTGTCGTGCATTTCATTATGGTTTTGCTTAGCGGACACCCGCGCGCAGGCGATCTGCGGATTTACGAGAATCCAAAGGCTCTGTTTAGGTTAGCGACCGTCCATAGGTAGTCACCATTTCAGCCTGTGTCGTGCAGGGCCATCCTTCGTTCGGCTTAAACGATGCCCCCAGTAGTCCAAAGGTTACTAGTAATTACAGGAAATATCTTGTCGTGCAAAAGCACTCCCTCCACAGACCTGTTGAGCCGACATGGAAACATTGTGCACATGGTCTCGGGGCATTCATATTCTCCTCCTGCGTTGATATAGGCCGATCACGGGGTTAGGTCAATTGTATCCGGTGAAGGCTCCTCGCATCCTGCTGGGTCCAGACCGCTACGTAGTCTTATTTTACCTTACTTATTACGGCGTTGCTGGAAGAGAAGGCCTACTGTTCCAGCTTACACAATTCCCGTGGGTGCTCTGAGGGAAGTCGGGCCCAACTCTCACACACGCAGCGCCGAGCTCTCAATCGAGTCGCAGGATGTTCCACATATAAATCTGTGCTTCTAAAAGAGAACGCAGATTCATCATGAGAGCTGCCACACCTCCGCAGCAGGACCCTTGAATAGTTCTGGCTAGCGCGGACAGGAGAGGAATGATACCATAGACGGCTGAGCCGTGTTGGGTTTAGAAACAAGATTTACAGTATTTGAGGTCTGTGCAGCACCGTATATGAGCCCCTGTAGTGTAGTGCGAAAGGCTTCGAGGCATTCCGCTCTTAGCGAGTTCCATAAGTACTCGCACGCCCCAAACTGTTACTTCGGATGACCCTGACTGGGCTCCCCTTGGGTAGCAGAGATAGTTTTACAACGTTGTTCGGGCACTGCTGTGCCATTCCAGAGTCGATAGTCTCGCCTTCTTTCTGTCCTTTATACTTTGGGTCCTGATTAATACGCCGCCACCTTGGGTTTGGAATCGCGAGATGCGCATGGTTTTGGCACGATATCAGAATCTTGTCCAGCTTATGTGTATGACTGGACCGAACACACAGAACCACTCGATGCCGTATCCAATTACAGATCGGCGTGCCCATCGACCTTGGTCCGACTTGGAAGATCCCATTGTGAGGGCTCTTTCCCAAACCAAGGAAATATTTAGCGTCCGGATCGGAAAACAGTGGTCGGTTTACCAATGCTTGGAATCGCTGCATATGGGCTGGCGGGGTGAGACGCATGAACGATAGACACCAGAAAAGATCACCCGGCGTCATGCGGCGAGTCAATAGCTTGTCGTGGCCCCCACTCACAGGGGGCAGAGTGCCAATTGCTATAAGGGAGTATCGTTGACGTCAAATA$TAAAATGATCGGGGTCCACGGGGATAGGTCGTCAACCTTTACACCGACGAACTATGCACAAAGACAGCGTTCCTAGTGGAGCCGATAAGAGGAAACCGTTATTTCGCTCCCTCCCACTGTGTCCCCCCCGTCCGGGTCCTAAGTAATGAATCGCGCCGATTCCAACGGTGCCCTCCATGTCGTAGCCATTAACTGCATCTTCATCAGCATCTCTGCAGAGACCACCCTTTTCCCGCCAGTCACCTTATCATCCCGTTTTTGTTCACTGCTAGTTAGCCCCGACGTGTGTTAATAATTGTGAACGGCGCCTTCCCGAGTAGCACAATGAAACAGGCTTTAGGATATGGACTACCTATTCGGTAACGCCGTGAGCATTGTGAGACAGTCTTACGGTAGTAGGGCGTTGTATATCCAGGCAGAATGAGACGTACAGAATTTCTTCTTGTCCTAAATGCTCCCGTACAGGCAGGAGGCTATGCTCGTAATACATAGACAACCCAGTGTTGGCCGCTCTCCAATGGTTCTAGTACTTCTGTCTCGAAAGTAGAGCCGTCAATGTCATTGACTAATTTTCGTGCCCAGCTGAGTCACGGATTCCGAGATGAGAACGTGACCGCATCTTCCGCTGACACGGCGTTTACGAATTGCTTTCTTGGAGTAAACCTCGGCTTGACAACCTCACTATGACAAGGCCATTCTTACCGGCCTGACCTACTCTTATTCAATCATATAGTTCTTTCAGATGTCCCACAAGAGCTCGAATAGATTTATTAGCCGCGGGTGTATTCCGATCCCAAGAGCTAATGGTCAGTGAGGGGGCCGTCCACGAAATCCTTTAGAGCGCCGATCTAGGTCATGAAACTGATTTGAACTGATAGTTCCCCACGTTTTGAGCGAGTCTCTGATCATATTTGGGGGTCTACCGGAGCTTTAGATTGGTAACCTCCTTATTCACTACTCCTTACCTCCCCCTATTACGAGAGTTGCACGCTGGCCGAACATTCGCACTCGACCGCGAGCCATATTTAATAAGGCGTGAGGTTCACGAACCTGCCCTTTTGCAGCCCTCACAGGGACCTGTATCATAATCGGTCCCGGCGGCAGGACCACGCTGTCCCACTAGTAGCACTTGGCTCATACTCGTAGTTGTAAAATTGAATACGAAATGTATAAGTGCGCCCCCAACGCCCAAGCAACGTAAGTTCATCAGTTATTTTCCTTTGTTCGTACATTAGCGCCCTAGTCGGCTAAGTCGGACTTTTAGATGTAATGCAGGTACCACCCTGTTGAACTAGTACCCCGTATCCTAAGAGTCCGCCAGGCTTACGCTTGGTCAGTGGCTCTTGGAGCTGAGCCAATGGGTATCACTTTGACCACTACCCGCTCATGAGCCCCGGACTTTTTATGTAAGGCGCGACGGAGTCCTGACGGTTGGGTTGGGCGCTTTTAATTAGAGCTGGGGTATACAAAGCCGATGTCCCCTCACAGGTCTGAGCTCAGCCAAGCGGGGTATGCGTGAATTACAACAAGTGAAACCCCACAGCGCGCTACACCAACGGGCGCTAGCGTCTTCTGCCTCTCATGTACCTGTCCTTGATAATAAAATCCACTCTGGGTGGAAGCCTGGGCCTTGTATATTAGGCTCCGATCAGTTCTGGTCCATATGGTAATCCTTAATCCCTCTACCTCACAGTCTGGGTGCCCCCGAGTATCACGCTCTACAACATCGTACCTAAGATAATAACGGACGGGCATGACTGGGCTTGCCGAGTTGATACTACTTGAGTGCCACATTGCGAGACCACCAGCTCGCACTCTCGTATCGTCGGGCGAGCTAGGAGAGATCTATTATCACAAAGCGTACCATC"


print(" ".join(map(str, match_all(bwt, patterns))))

