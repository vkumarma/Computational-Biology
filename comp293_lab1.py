############################################# BA1A #############################################################
from collections import defaultdict
def construct_lps(pattern):
    lps = [0] * len(pattern)
    if len(pattern) == 0: return lps
    i, j = 1, 0
    count = 0
    while i <= len(pattern) - 1:
        if pattern[i] == pattern[j]:
            count += 1
            lps[i] = count
            j += 1
        else:  # not equal
            count = 0
            if j == 0:
                lps[i] = count

            else:
                lps[i] = count
                j = 0
                continue

        i += 1

    return lps


def kmp_search_with_count(text, pattern):
    n = len(text)
    m = len(pattern)

    lps = construct_lps(pattern)
    count = 0
    res = []
    i = 0
    j = 0
    while i < n:

        if text[i] == pattern[j]:
            i += 1
            j += 1

            if j == m:
                count += 1
                res.append(i - j)
                j = lps[j - 1]

        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return count

#
pat = "CGAAAAACG"
text = "GCGAAAAAGGGGCTCGAAAAAAACGAAAAATCGAAAAATCCATCCGAAAAAACGAAAAAGACGAAAAACGAAAAACCGAAAAAGCGAAAAAACGTCGTACGAAAAAACCGAAAAACGAAAAACGAAAAACGAAAAATCGCCGAAAAACGAAAAAGCGAAAAATTTGCGAAAAACGAAAAAGCGAAAAACGAAAAACGAAAAAGTCGAAAAAATCGAAAAAACCGAAAAACGAAAAAGTCGAAAAACTAGAACGAAAAAAAATGCGAAAAAGGAGGCGAAAAACGTACCGAAAAACGAAAAAACCCCGAAAAACGAAAAACCGAAAAAATCCGAAAAATACGAAAAATTCGCGAAAAAAATCGAAAAAGCGAAAAAGAGCCTTCCGAAAAATATAACGACGAAAAAGCCGAAAAATGGAGTCATTTCGAAAAACGAAAAACGAAAAATGCGAAAAACGAAAAAGGTTACGAAAAAGTGTCCGAAAAATCGAAAAATTCGCGAAAAAGCGAAAAAAGCGAAAAACAGGCCTAGCGAAAAACGAAAAATCGAAAAACGAAAAACGGAATCGAAAAACCGAAAAATCTGCGAAAAACCCATCGAAAAACGAAAAAGTCGAAAAATGCCGAAAAACGAAAAAGCGAAAAACTTATCGAAAAACCGAAAAACGAAAAAACCTGCGAAAAACCGAAAAAACCGAAAAAACGAAAAAGCAATAGAACCGAAAAACGAAAAACCGAAAAAATTCGTCGAAAAACTCTACATCGAAAAACGAAAAATGCGAAAAACCTGAAAGCGAAAAAAAGGCGAAAAATAAGAATCGAAAAAGGCGAAAAACTCCCGCCGAAAAAACGAAAAAGCGAAAAACTAACGCTCGAAAAACACCGAAAAACAAGACGAAAAATGCAGACCCGAAAAAGCGAAAAACGAAAAACGAAAAATGCGAAAAAGACGTACCCCCCACCGCGAAAAACCGAAAAACGAAAAAACAGCCCGAAAAATACGAAAAACGAAAAAGCGAAAAACGAAAAA"
print(kmp_search_with_count(text, pat))


############################################# BA1B #############################################################

def frequent_words(text, k):
    freq_table = {}
    k_mers = []
    for i in range(0, len(text)):
        k_mer = text[i:i + k]
        if len(k_mer) == k:
            freq = kmp_search_with_count(text, k_mer)
            freq_table[k_mer] = freq

    maximum = max(freq_table.values())

    for key in freq_table:
        if freq_table[key] == maximum:
            if key not in k_mers:
                k_mers.append(key)
    return k_mers


print(frequent_words(
    "GGATGCAGTACCCGTCGCATCCGGCAGCACCCGTCGCGAACACTTAACAGTGGAGAACACTTAACAGTGGAATCCGGCAGCACCCGTCGCACAGTGGAACCCGTCGCATCCGGCAGCACAGTGGAATCCGGCAGCGAACACTTAACCCGTCGCACCCGTCGCACCCGTCGCACCCGTCGCGAACACTTAATCCGGCAGCGAACACTTAACAGTGGAACCCGTCGCACCCGTCGCGAACACTTAATCCGGCAGCATCCGGCAGCGGATGCAGTGAACACTTAATCCGGCAGCACCCGTCGCGGATGCAGTATCCGGCAGCATCCGGCAGCACAGTGGAGGATGCAGTACCCGTCGCACCCGTCGCGGATGCAGTGGATGCAGTGAACACTTAACCCGTCGCGAACACTTAATCCGGCAGCACCCGTCGCACAGTGGAATCCGGCAGCACAGTGGAACCCGTCGCGGATGCAGTACAGTGGAATCCGGCAGCGGATGCAGTATCCGGCAGCGGATGCAGTACAGTGGAACCCGTCGCACAGTGGAACAGTGGAGGATGCAGTGAACACTTAACAGTGGAACCCGTCGCGAACACTTAACCCGTCGCGAACACTTAGGATGCAGTATCCGGCAGCACCCGTCGCACCCGTCGCATCCGGCAGCGAACACTTAGAACACTTAACAGTGGAACAGTGGAGAACACTTAGGATGCAGTGAACACTTAGAACACTTAATCCGGCAGCATCCGGCAGCACCCGTCGCATCCGGCAGCACAGTGGAATCCGGCAGCACAGTGGAACAGTGGAGGATGCAGTATCCGGCAGCGGATGCAGTGAACACTTAACCCGTCGCACAGTGGAACAGTGGAACAGTGGAACAGTGGAACCCGTCGCGAACACTTAATCCGGCAGCGGATGCAGTATCCGGCAGCACAGTGGAATCCGGCAGCACCCGTCGCATCCGGCAGCGAACACTTAACCCGTCGC",
    14))

########################################## BA1C ##################################################################

def reverse_complement(pattern):
    mapping = {'G':'C', 'C':'G', 'A':'T', 'T':'A'}
    new_string = ""
    for i in range(0, len(pattern)):
        new_string += mapping[pattern[i]]

    new_string = new_string[::-1]
    return new_string

print(reverse_complement("AAAACCCGGT"))

############################################ BA1D ####################################################################
def construct_lps(pattern):
    lps = [0] * len(pattern)
    if len(pattern) == 0: return lps
    i, j = 1, 0
    count = 0
    while i <= len(pattern) - 1:
        if pattern[i] == pattern[j]:
            count += 1
            lps[i] = count
            j += 1
        else:  # not equal
            count = 0
            if j == 0:
                lps[i] = count

            else:
                lps[i] = count
                j = 0
                continue

        i += 1

    return lps


def kmp_search(text, pattern):
    n = len(text)
    m = len(pattern)

    lps = construct_lps(pattern)
    res = []
    i = 0
    j = 0
    while i < n:

        if text[i] == pattern[j]:
            i += 1
            j += 1

            if j == m:
                res.append(i - j)
                j = lps[j - 1]

        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return res


pat = "CGAAAAACG"
text = "GCGAAAAAGGGGCTCGAAAAAAACGAAAAATCGAAAAATCCATCCGAAAAAACGAAAAAGACGAAAAACGAAAAACCGAAAAAGCGAAAAAACGTCGTACGAAAAAACCGAAAAACGAAAAACGAAAAACGAAAAATCGCCGAAAAACGAAAAAGCGAAAAATTTGCGAAAAACGAAAAAGCGAAAAACGAAAAACGAAAAAGTCGAAAAAATCGAAAAAACCGAAAAACGAAAAAGTCGAAAAACTAGAACGAAAAAAAATGCGAAAAAGGAGGCGAAAAACGTACCGAAAAACGAAAAAACCCCGAAAAACGAAAAACCGAAAAAATCCGAAAAATACGAAAAATTCGCGAAAAAAATCGAAAAAGCGAAAAAGAGCCTTCCGAAAAATATAACGACGAAAAAGCCGAAAAATGGAGTCATTTCGAAAAACGAAAAACGAAAAATGCGAAAAACGAAAAAGGTTACGAAAAAGTGTCCGAAAAATCGAAAAATTCGCGAAAAAGCGAAAAAAGCGAAAAACAGGCCTAGCGAAAAACGAAAAATCGAAAAACGAAAAACGGAATCGAAAAACCGAAAAATCTGCGAAAAACCCATCGAAAAACGAAAAAGTCGAAAAATGCCGAAAAACGAAAAAGCGAAAAACTTATCGAAAAACCGAAAAACGAAAAAACCTGCGAAAAACCGAAAAAACCGAAAAAACGAAAAAGCAATAGAACCGAAAAACGAAAAACCGAAAAAATTCGTCGAAAAACTCTACATCGAAAAACGAAAAATGCGAAAAACCTGAAAGCGAAAAAAAGGCGAAAAATAAGAATCGAAAAAGGCGAAAAACTCCCGCCGAAAAAACGAAAAAGCGAAAAACTAACGCTCGAAAAACACCGAAAAACAAGACGAAAAATGCAGACCCGAAAAAGCGAAAAACGAAAAACGAAAAATGCGAAAAAGACGTACCCCCCACCGCGAAAAACCGAAAAACGAAAAAACAGCCCGAAAAATACGAAAAACGAAAAAGCGAAAAACGAAAAA"
print(kmp_search(text, pat))

########################################### BA1E ################################################################
def clump_finding(genome, k, l, t):
    # freq_table = {}
    k_mers = set()
    for i in range(0, len(genome)):
        interval = genome[i:i+l]
        k_mer_count = defaultdict(int)  # default value 0
        for j in range(len(interval)):  # store frequency of every k_mer in a window
            k_mer = interval[j:j+k]
            k_mer_count[k_mer] += 1

        for k_mer, count in k_mer_count.items():
            if count >= t:
                k_mers.add(k_mer)

    return k_mers


print(clump_finding("ATCTTGTAGAGTGGGAAGTCCCTCCCCGAATTGACTTAGCTCCTGCAGGGCGACTTCAGCTGCCAAGCTTCCCAGAACCATAAGGATGAACAGGATCAGCTATACCTCCGCCGGCACTGTCCGACACCGTTTGGGCCAAGCGAATGAGGATTCGACGACCATGTTCCTCGATGGGCAGGGACCTCGGAGCCGTTGTAATGTAAATGCTCTTAGCAGCTTCACGTGGGAGCCGTTGTAACTGCAAGAGCCGTTGTAAATGTCCTCTATGTCTCCGTTGGAGCCGTTGTAAGTTGTAAGCTGTTGTGGGAGTATGGAGAAGGAGCCGTTGTAACGTTGTAAACGGGAGCCGTTGTAAACGCTGAGCCGTTGTAATAAAGGGGCGAGCCGTTGTAAGTAACCCGTCTTCAGGCGAAGCCGGCCAAGCCTGCGGGGGCGCTGAGGTTTTAGCGAGCCGTTGTGAGCCGAGCCGTTGTAAAACGTGAGCCGTTGTAACATATTTCCTCACAGAGTCGGAGTAATTCGAGGTGAGCTGAGCCGGAGCCGTTGTAATAAGGCTCAGAGCCGTTGTAAAGAGCCGTTGTAATAATAATGATTGGAGCCGTTGTAACCCATCTAGCAGCAGTGTATATTGTATTTGAGGCAAAACCCGTGGAGAACCCGCGGCATGAGCCGTTGTAACGTTGTAAAGCTAACACATAAATAAGGGTATGGCGAGCCGTTGTAAACTCTACCATGTCGATAGGACATTGTGAGTCTGAGCCGTTGTAACTCAAGATGAGTTGCCCCGCTAACGGTTAACCTAAGATTTGTTACATATTGGACACGATGGCACACCCTAGAATACTAAAGACCGGCCGCCGGCGCATCGTCGGTAGAATTGGCCAGCAACGGAAAAGGCTCGCAATGTTGTCGCGCCAAGCGTATCTTAATCGCTCACATAGACGGTACCCTGGCATGTTTTTCACTAAGACGACCCTAAGACGACCTAAGACGACCGTGTCTCGCGAGAGATGTTCCCGAAACTAAGACGACCCCTGTAAATGTAAACTAAGACGACCGCAGACTAAGAACTAAGACGACACTAAGACGACCTGATGACCAGTGCTTTGAGTGGTGCCACTGGCTAAGGCTAACACTGAACTGACGGCTAACACTGAAAACTAAGGGCTAACACTGATTGACTAGGCTAACACTGAGACTAAAGACCGTTCCTGCTCCTTTATGTCCTTGCACTAAGACGACCTTATGTCCATAGTCTACTGGCGGCTAACACGGCTAACACTGATGGGCTAACACTGAATTTAGGATATGGAGGTTAGACTAAGACGACCGACGACTAAGACGACCACCAGCACATTTGGCGGCTAACACTGAGGACTAAGACGACCAGGCTAACACTGACCAAGAGTCCGACTTGTTGTCCGGGCTGTGGGGCTAACAGGCCTTTCCTAGGGCTGATAAGACGACCTTTCCTAGGGCGACCCTAAGACGAACTAAGACGACCTTACTTTCCTAGGGCACTGACCGGCTAACACTGATCTTTCCTAGGGCTGACACGGGGCTAACACTGAATAATCGGCACTCGGAGGGCTTTCCTCTTTCCTAGGCTTTCCTAGGGCTGAAATCTCCCAGGCTCTTTCCTAGGGCCTGATAACTTTCCTAGGGCTCGATCTCAACCATCCGAACCACTTTCCTAGGGCTAGCGATTAGGCTTTCCCTTTCCTAGGGCTGGTCATACATGGTTTCTTTCCTAGGGCCTCTACTTTCCTAGGGCACATGGTTCTTTCCTAGGGCAGTCATACCTTTCCTAGGGCTCCTAGGGCACATGGTTTTGAAACTTCTTTCCTAGGGCTTTCCTAGGGCGCTTTCCTAGGGCGCAGTGTTCTGTCATACATGGTGTCATACCTTTCCTAGGGCTTGAGAGGTTGACTTTACCCATCTGACCCTTTCCTAGGGCCATGGTAATTCTTTTCGAAATCAGGCTTATTCTCGCTTTCCTAGGGCTGTCGTCATACATGGTGTTCGTAACAGTCAGTCATACATGGTACATCCTACGCGCCGTATTAGGGCAAGTCATACATGGTCATACATGGTTCATACATGGTAATTAGCGTCATGTCATACATGGTATTAGGGCAATTATTAGGGCAATTGTCATACATGGTTGTCATACATGGTTTGCATACAAATTAGGGCGTCATACATGGTGGTGTGTCATACATGGTCCATCGCAACAGTCGTCATACATGGTGTCATACATGGTATTCTCTTAGTCATACATGGTTCATACAGTCATACATGGTACCCCCTACGCATCAGGAGTCATCGTGCTAAGAGGGCTTCGCTTTCCAAGCAGGTTATGGGAAAAGGCTATTTAAGATTGTAATTCGTGTGTAATCACAACGTGAATCATCAGGTGCCAACAGTGTTGTAGGAGGCCGCGGGTCTCAGTCGGCCTAGTATCCGTTTTCGTGTAATAATTAGGTGTCTCATTTATGCCTAAGTGGATACGAATTGTCTCTCCGGTGGATCGTGACCGTCGAGCATTGTAACCTATGTTACTACACTGGGCTCGCAACTTACGGGGTGAGTACAAGACGACGAGTGGAGTATCCTTGAGGGGCACACGTCATAAGCATTAAGAAGGTAGTAGCAGTCCGATTGTTAATCCTTAAAGTTTCTACCTCTCGTGACATTAGGGGTTCGCCCTGAATTACGTGTTTCCAGGTGGTCACACTGATTGCAGTCTACACATGCCTAAGTTGCTCCCCTGGCCAAATGGCTGCCTCTGACTACAGCTCCTCCAGTCCGAATAGACTTGACTGTAACAAAGAACCATATCCGTACGAGATAATATTGCTAAAAGACATAGACCATCAGTTCCGATGCGTGACTGTTATAATCAAACATGTATGTACGGGGAGTCTGGATGACGCCGTTCGATTCCTTCCGCTGATCGGCGTGGCTCAGTCATTATCTCCGTGTATGCCGCCCACCACCTCATACTGCCGACCACCGAGCGTAGCCGGTGGATACAACTTAGTAGTCAGGCTAAACGGTCCGCTAATGAAGGCTTGAAACTTAGTCATCTCGCGGCTGCAGCGGGCATAATCGTGCATAATCGTCGGTTTTATACGGGCATAATCGTCACGGGCATAATGGGCATAATCGTGTCATGCCTTGTAGGTCCTGTAGCTACGTTCTGGGCAGGGCATAATCGTCGCGCGTTTATTTCATTTATTTCATTGTTTCATTGGGCATAATCGTTAATCGTATTTGGGCAGGGCATAATCGTTAATCGTTGTTTCATTGATGGGCATAATCGTATCGTTTCATTGGATTTATTTCATTGTTTTTTATTTCATTGCTTTATTTCATTGGGTTCAATGTCCGTTCGCCTGGCGGGCATGGGCATAATCGTGTATCGTTGGGCATAATCGTCGGGCATAATCGTATTTCATTGATTTCATTGTTCCTGCCATAAACGCAGGGCATAATCGTCTATCACCTTGGTCAAGCCTATTTTATTTCATTGGGCATAATCGTCCACTAGGGCATAATCGTTCATTGTATGGGCATAATCTAGCGGGTGCAAGTTTTCTAGCTAGCGGGTGCAATCGTATCGCTAGCGGGTGCATAATCGTACTAGCGGGTGCTAGCGGGTGCACCCATGCCAGGCCGTACGCTAGCGGGTGCAGTTCTAGCGGGTGCATTCATTGTCTAGCGGGTGCAATTGTATTTCATTGTCAGGCCGTACGTCAGGCCTTGCCTAGCGGGTGCATCATTGCCGAGGCTGTAGGCCGTACGTCTACGTCTCTAGGCCCTAGCGGCTAGCGGGTGCACCGTACGTCAGGTCTAGCGGGTGCACGTCCATGCCTAGCGGCTAGCGGGTGCACGAACCAGCCTAGCGGGTGCATCAGGCCGTACGTCACCATACTATTATTCAGACGTTCCCCGTACCGGAAGGCCGTACTAGCGGGTGCACTACTAGCGGGTGCATGCCTAGCGGGTCTAGCGGGTGCAGCGTGGGCAATGCTAGCGGGTCTAGCGGGTGCAGGGTGCAGCACGTCGTCTAGCGGCTAGCGGGTGCACTACCAGACAAGCTAGCGGGTGCAGGTGCAGCGGCTAGCGGGTGCACCAAGGGTGTCTCATGCTCCCTTAGGCCGTAGGCCGTACGTCCGTAAGGCCGTACGTCCAATGGTAGTAAAGGTGACCAAAACGTGCTCATTTCGGACATTGCGGGCAAGAAGAAAGAAGAACACTAAGGGTACTTCACAAACGTATGCTAATATGGCCACATGAGGGCATTGACGCGCTGCCTGCCCGGGACGTGGTTGCACTGTGGGCAGCTGACCATCCTTCCCTAGCTGTGGTCCTATCACGGCTCCTTAACCTTTGAAGCGAGTGAAGTTTTCCGATTTCTAACCCGAGATGTTTGCCGTTGACACCACGATTGGGAGCAGATAATGGTTGCGAGCGTTACGTTCTCCCCGCCTCACTGTAATTGCCTGACTATAGTAGTATTAGACCGTGATGAAGTGCAATTTCTAACAGCAATCTGCTGCCAAGGCCTTGGAGCAGCACGAACAACTCCGCGCTAGACTGTTCTCCGCGCTAGATAGCACACCGGGCACATCGGGACGGCAGTTGGCTCCGCGCTAGATCGAGTCCTCCTCCGCGCTAGACTCTCCGCGCTAGAGGACTCTTTATTTAGAGCCCTCCGCGCTAGACCTCCGCCTCCGCGCTAGAGGTGCTCCGCGCTAGATAGACGCTAACGCGAACTCCGCGCTAGAAGACTGTATGATACAAGATCAAGGCTTACTCCGCGCCTCCGCGCTAGACCTCCGCGCTAGAGCGCTAGAGACGGTACACAAATGGTGTGGAACTCCGCGCTAGAGAGTTCCGTTCAGCCAGCTATGACTTAGATGTCTCCGCGCTAGATCAAGTTGCTCCGCGCTAGAGTCGGAAATGGCTCCGCGCCTCCGCGCTAGACTAGAAAAAGCCTCGTGTGTGTCTTAGGGCGACGAAGCCTAGCACGCTGAAACGCGCGCGTCTTCCTCCGATAACCCTCCGCGCTAGCTCCGCGCTAGACCGCGCTAGACTGTAGCACCTTCAATTAACATCTCCGCGCTAGAATCTAATACTCCGCGCTAGAAGCTCCGCGCTAGATCCGCGCTAGAGTTAGGCCGTCTCAAACGCTCTGTGGCTCTTGATCTCGCCAAGAACTCCGCCTCCACCTGAGAACTGCGGGGCCCCGGCCTATGGAATCACACTTCCTTGATAGGATGAACAAACACACTCTTTCTTCGTACTTAGGTTCACAAGAATGGTAAATTGACAGTGTGCCTTACCTCCCGGTCGAAGACTCACTCGGACAATGTGCTAATTGTTGATCCGATAATATCGAGTTTGTACCAAGTGTCTGTTACAATAAGCCGTAATGCTCGTAACATATGACATCTGCAAGATCTTTAATGAGCGAGGACTGTGGGCCCGGCAAACACACTATCTGGATGGAAACGCGCAACTCATTGGAGATGCGGAATAGAGCCCCCAAGAACAAGCGTAGGCTAACTCGGAGATTACACCCTTGGAAGGAAATCATTCGGCAAAGGTTGGGACGTCTGGTGCTACGTCGCTCGGGGTGCTCACGACACTGCCCTAGTCAAACATACGCGGACCAGAACCGTTACGTGCCTGTAAGTTATACCGGTAGCACTCCTGGACCGCCTGCGCCATTCACGCCATAACACGGACCAACAGGCTGATATACGCTGCACGCTGCGATGGACAAGGTTTGCACAGTAACTGAGTATACATATTCTTCTTCCGGTGGTATTCTGAACGTCTGCCCCTATGGATTCACAAATCGCGTCCATGAGGGCTTTGCAGATATTGAACTTAATCACTACTTAACACGGTAACGTGTTTGACATGTGCTTGACATGTGCGGTTTTCGAAGAGTCGGACTTGACATGTGCGTCATCCTTGACATGTGCGTTGACATGTGCGTAGAAGCATGTTGACATGTGCGGGGGCAATTAGCGTTGACATGTGCGTTGAGATTACTTTAACACCTTGACATGTGCGGAATCGGTTGTGCACGAGATCGCCATCTTGACATGTGCTTGACATGTGCGCATGTGCGAAACTTGACATGTGCGCGAGACCGCACTCGTGGTAGAGCCGATTTTAAAGTTGACATGTGCGGTTGACATGTGCGACGTTCCTACTCATTGACATGTTGACATGTGCGGAGGGATCCAATTACAGGTGGTGTTGACATGTGCGTGCGGCGTAGATATGCGTAGCACGACGCTCGTGCTCCCTCAGAACAGTAAGATGGTCTTGACATGTTGACATGTGCGACATGTGCGGCCCGGCTCCACAAATTTCTTTGACATGTGCGCTAAATTGACATGTGCTTGACATGTGCGGAATGAATTGTAGGTCTCTTTATGTTTGACATGTGCGCGCTCAATCCGATGGCATTTGACATGTGCGACATGTGCGTTGACATGTGCGATTTTTAACCGCCCGGAACGTTTGTGTTCTAAGATTCGAGGCGGCGCCGGCTCTGTGCGGTCCCAACTGAGTCTGCTATCCTCCACTGCCGGTCCTGAGACTTAACAGTAAATACTTCGGCCATTTTATTACTTTCCGATGCCCCCAAAATCGTTATCCTGACGGTCCTGAGATAAGGTGAGCGCCGCTACTCAGTTCTCCGTTGATTAGATTCATAGTCTTCCCACAGCCGGATCGAATTACACTGTTATTCAAAGAACTTGACATACCAGTAGATCCTCTTCGGAGAGCTCCTAGCACACTCTAATCGCGCTAGTTCAGGATCCGCCTTCGACATAGAACAAGGTTCAGAGGAACGTCACTTCGGGGCGTATGCAGAACGGTCTTTAAGACAAGATTCAAGACGCGTAGATTGACGTTCGGTCGTCTGCACTAGAGAATAGACTCGACAATAAATCTAATCTACGGTCTTTGTATACCATCTACGGTCTTGTAATCTACATCTACGGTCTTTCATCTACGGTCTTGGTCTTTTAGATCTACGGTCTTCCCCAATATCTACGGTCTTACACAGAGTTGTATCTATCTACGGTCTTCGTCGTGATTGACCACGGAGGCGTAAATCTACGGTCTTCTACGGTCTTACAGATATCGGGAGATCTACGGTCTTCTTCCGTATCTACGGTCTTCAGCAGCGCAGAGATCTACATCTACGGTCTTATACAAGCATTGTGTGCGCCAGGGAAATCTACGGTCTTAGATGGCGAGTGGCCTATCGCCCTTAGACCAGCCTTGGGCCGGGGCAGCCGGGTGGGGGGTCCGATTATCCCATTAGATGGTACTCCACGCACGATCGGCCAGTATATCTACGGTCTTCTTTATCTACGGTCTTACGGTCTTCGTATTCTCCATCTTAGGGATGGGGATCTACGGTCTTTTAGTTCAGAAGCTTCTATCTACGGTCTTAATATAAAATCTACGGTCTTTACGGTCTTACGGTCTTATCTACGGTCTTCGATCTACGGTCTTCAGAGCGTCGTAAGAGCGTCGTACCCAACAGACCTTGTATGTCAGAGCGTCGTACCGAGCCAGTCCAATCCTTAGAGCCTTATCCTCGACATGTGCCAACTTGCTCAGAGAGCGTCGTACCAGAGCGTCGTACCGTCGTACTTCCGCCAGTAGAGCGTCGTACACACCATTTAGAGAGCGTCGTACCTGCCTAGGCAAACACCATGTTCACGGACAACCGATATCTATAGGCATGACGGCCACAAACTCGGTCAATACTAGATAGAGAGCGTCGTACCTTACTGCATAAGAGCGTCGTACCCAAAGACAGAGCGTCGTAAGAGCGTCGTACGGAAGAGCGTCGTACTAGCGCTCAGGCGTCCGTATCACCGAAATCCGATGACCGTAGTAACTTTCAATCGGCAGATAGAGCGTCGTAGAGCGTCGTACTACACCTAGGAGGCAGAGCGTCGTACTCGTACGAGAGCAGAGCGTCGTACTGACGTGGAACAAAGATAGAGCGTCGTACTAGAGCGTCGTACCTTATCTTCCTCAAGCTCCCTACGTACCAGAGCGTCGTACTTAGTCGACTAGAAGAGCGTCGTACTCACTGCAGCAATCTTAGCTATACTACAAATGGCCCAATCTTACAATCTTAGCTATTAACACAATCTTAGCTAGACGATGCAAACAATCTTAGCTATCAATCTTAGCTATGACGCAATCTTAGCTAATATAATTGACGATATAATTGACAATCTTAGCTACAATCTTAGCTACGATATAATTGACGATATAATTGACGATATCCAATCTTAGCTAACAATCTTAGCTATTGACGATATAATCAATCTTAGCTATGACGATATAATTGACGATATAATTGACAATCTTAGCTATAGCTAAATTGACGATATAATTGACGATATAATTGACGATCAATCTTAGCCAATCTTAGCTAATATACAATCTTAGCTAATCTTAGCTAATCAATCTTAGCTACTAGACGATATAATTGACGATATAATTGACGATATAATTCAATCTTAGCTAGACCAATCTTAGCTAGATATAATTGACGCAATCTTAGCTAACGTATACGGCTACGTATACGGCCAACAATCTTAGCTCAATCTTAGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATACGGCTACGTATCACCGACCATATACGTATCACCGACCATATCACCGACCAGCTATATCACCGACCAATATTATCACCGACCACCGATATCACCGACCAGCTACGTATACGGCTACGTATACGGCTATATCACCGACCAACCGACCATATCACCGACCAGACCAGTATACGGCTACGTATACGGCTACTATCACCGACCAATATCACTATCACCGACCACGACCATATCACCGACCATATCACCGACCATTCTGCGAAGAGTATCACCTCTGCGAAGATCTGCGAAGAGTCCGACCATATCACCGACCATATCACCGACCTCTGCGAAGAGTATCTGCGAAGTCTGCGAAGAGTTATCACCGACCACCATCTGCGAAGAGTTCTGCTCTGCGAAGAGTGAAGAGTTCTGCGAATCTGCGAAGAGTGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTCTGCGAAGAGTTGCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTGTCTGCGAAGAGTCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGTTCTTCTGCGAAGAGTTCTGCGAAGAGTTCTGCGAAGAGT",12,500,16))
########################################### BA1F ################################################################

def skew(genome):
    arr = [0] * (len(genome) + 1)
    g_s, c_s = 0, 0
    for i in range(0, len(genome)):
        if genome[i] == 'A' or genome[i] == 'T':
            arr[i + 1] = arr[i]
        else:
            if genome[i] == 'G':
                g_s += 1

            elif genome[i] == 'C':
                c_s += 1

            arr[i + 1] = g_s - c_s

    minimum = min(arr)
    indices = [i for i in range(0, len(arr)) if arr[i] == minimum]
    return indices


print(skew("TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT"))
