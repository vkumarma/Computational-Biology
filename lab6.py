def composition(k, text):  # BA3A kmer composition of a string
    kmers = []
    for i in range(0, len(text) - k + 1):
        k_mer = text[i:i + k]
        kmers.append(k_mer)

    return kmers


def reconstruct(k_mers):  # BA3B Reconstruct a String from its Genome Path
    new_string = k_mers[0]
    for kmer in k_mers[1:]:
        new_string += kmer[-1]

    return new_string


def formatting(nodes):  # printing nodes and edges
    for key in nodes:
        if len(nodes[key]) != 0:
            print(key, "->", ",".join(nodes[key]))


def overlap(kmers):  # BA3C overlap
    nodes = {}
    k = len(kmers[0])
    for kmer in kmers:
        nodes[kmer] = []
        for k_mer in kmers:
            if kmer != k_mer:
                if kmer[1:] == k_mer[:k - 1]:
                    nodes[kmer].append(k_mer)

    formatting(nodes)
    # return nodes


def de_bruijn_graph_from_string(k, text):  # BA3D
    nodes = {}

    for i in range(len(text) - k + 1):
        k_mer = text[i:i + k]
        prefix = k_mer[:-1]
        suffix = k_mer[1:]

        if prefix not in nodes:
            nodes[prefix] = []

        if suffix not in nodes[prefix]:
            nodes[prefix].append(suffix)

    formatting(nodes)
    # return nodes


def de_bruijn_graph_from_kmers(kmers):
    k = len(kmers[0]) - 1
    nodes = {}
    for kmer in kmers:
        for i in range(0, len(kmer) - k + 1):
            k_mer = kmer[i:i + k]
            nodes[k_mer] = []

    for pattern in kmers:
        prefix = pattern[0:len(pattern) - 1]
        suffix = pattern[1:len(pattern)]

        if prefix in nodes:
            nodes[prefix].append(suffix)

    formatting(nodes)
    return nodes


with open('kmers.txt', 'r') as file:
    # Read all lines and strip leading/trailing whitespaces
    lines = [line.strip() for line in file]

# Print the list of lines without extra whitespace
# overlap(lines)
de_bruijn_graph_from_kmers(lines)
# print(de_bruijn_graph_from_string(12, "GGATTGCGGGGTTTGCCCGCTGCAGCAATTGTCCCTGTGTTGCTGGTCCGTCTATGAAATATGCGGTCGCATTCCGGAGAGCTCATTCTAGCAGATAGCGCCTACACGGCTCCAGTTAAGCAGTTACCGGTGAATGTATTCTCTGAATGTACGGCTTTCTAGATTGTAGAGTGCCATGACCGCTCTCCACGATGCACCATTGGCGGTCCTTTTGCCGGCTCTTTTGCAGCGCTGCATTTTTGGTAGAGGCTTTAACCCCCCGAGGAATAGCTAGGTTCATGCGAAGTAGGGGCAGGCTAGAAGACTGACTAGAGCTGATGTGATCGGCTCTGTCAGAGGAAGAATTCATTGTCTCTACGGCTAGTGCACCTGTGGATAACGTAGTACCTCCTCCCCCTACATCCCTCCACTTGAACATCTGGGTACCCGCTTTCCGCCAGGGAAGTAACCAGATTTATAAAATAAGATCTTATCGATGGACGGACCGCGGTCGCTTTTGGACGGGTTCGTCTATGCCAGTCTATGGAGAGGTTGACCGCCAAGCTTCGCTGGGGTCATCGCAGGATGAGGATATATTTGCCGGTGCATGACATGACGCTACGGAACCGAGGGTGTGTGAGCAAAAACCTGTGACATTACGACTTGCGGGCGCCAGAATCGAGGAAGTTTCCGTCCGTGTTGATAGACCATTTTCGATGGAGCGCTAAAGCGACGAAATTTAACTTCAAAGTGCCTTTTGCCCAACCTCCCTCATTCCGACAACGTCGTGCGGACGTAGTTATGTGCTGTTAATCGGTGCACGATCAGATAGCTATTCTGTCCCCCAGCCTATGTTAAACCCTCCCTTGATAGGACTGCGCGTGGTAGACGTTGACATAGTCCAGCGATCCGTGCGCCCCTCTCGGGCCTCTATGCGACGATACCTGGCGGTTTACCCCGGAGATATTCACCATCTCCTTGCTCCCGATCCGTCGAGCCCTTGACATGAGGGCTTATCACATCGTTAGAATCGTATGCGGATCGTTGAACGTCTTTTTGGGGTACGCACTCAGAACCTGTCCGTTCCCCATCCCTCCCATCCAGCATGCTAAGAAGATCTCGGTCCGAACGATCGGATTCAGAATTCCTCTGCAATGAATGCGAGGGAGTCAGGCGCGGGTCGTGTTTCCGTACACGTGTTGTCTCGGAGGGCTACAGCGGTCCGTTTGCAGCGAGCTGTGGAACCCATAGATAGCGCTAAAGCTATTGTGCCTCGGCGACTGCCTCACAAAAAGGCAGTTCAGACTTGATGCAGCCGGAGACGCAGTGTCCCCAGATATGGCGACAGTGATAGTAGCGAAGCACTTCTGGAACGAAACGACATAGCATATCCTGAACTCACACCGTGTAGGTGGCGCTTGCGCCACTATGAGGTCGTGCTCTCGTCAAGAATCCGTAAGTCAATATGACTGCCAGTGGGCACTAGCAGAGGAAAATCAACTGTGGCAACGTCTAACTGCTAATGGGGTATACGCTACACGCGATGATGTATTGGCAGCAGTAGTAAGCAAAATCCAATTGAGAGAATGAATAGAGTGTAGGAATTAGTTTGTGTCTGCCACCAACCCCCTCGTGACAAAGCAACGACACAGGAATGGAGCGTGGGTCGCTATCCACTCCGGGCAACGACTAACTTCAACGAAGTGCTTACTGCGCTCCTGACTAGACGTACGAGTTAGCGCCACCGCGATTACTGCTTTTACAATAGCATATTCTGTGTTCGGATTGTTTTGAGAATCCTCAGTTGGCCCAACTCGGCCCAGGCACCGGCTGTATGTAGCAGATGTATTCTTTATATGTCCCGTATCACGCTAGGAAATCCAGTATGAGCTCAGTTGAGCAACACTTCGCAAAATTCGAGACAACTAAGTTAGGAAGATGAGACTGATCATGATATGGGGATAGTGTTCGTGCTCCACTGTACTATGCAGCGTCATTGGTTTTTCAGGGAATACCCACGA"))
# result = composition(50, "CAGGTTGGCTTAGAGGACATGTACGGCTCTAAAGAGAGGTGGGAGATACATTGACGTCCAAAAGTAAACCGCCCTGGAGAGGCAATGGTCTTGGCTCATGCGCACCGGAAGGTCCTCTATCCGCGCTTACTATTGGATGGTTTTCGTCAAGGGCGGCGAACACATAACTGCTCACAATCGAATGCTTCACAGGCGTAAAGCCCCAGTACATGGAACAGTTCCTCACGAAGCATCACTATCGTCTGTTGTCTGGCCCGTATGCACGCCCCGGGCTTTGCTTTTGCTACCAGCCAGCCTCTGCTAGAGGCTCAGATAAAGGAACCGTCCGGACGTGTGAGTCCATAACACACATGTACAGAAAGAATAGCATGACCCTCCTAATTGGCATGAATCGGTGGACTGGTGTAGGTTTAATCCGGCTGTTATAGGTTTCCCTATTAATATATGGCGGACGTGGCGCCAAATTCCCCACTCGAGCTTTTGATAAGGCACTAGTGCGACCCTCAGGTCCTCCATCCTGCAAATGGAAACCATGCGGACCCAAGCTGAAATCATGGGGGCTCGAAGATAGTATTCTACTTCCGGCCAGCCGTCGGGAGTTATGGTGCGGTTTCTGGATAGACGCTAAACTCCCAACGCCAATTCAGTGTTATAACTCCAGATCCCCTCAGATATCGAATATATCCATCTAAGCCTTCGGGAGGCGGAAGTTACTAAGCAAGCGCAGGTTGCATATCAAGACGTAGACATACAAGACTCGGAAACCTATTGCTGAGTAGGATGGCTAAACTCTGGATCAGCCAGTGTTGTACTGTTGGGGTAGTAAGCAAGGAGCGACACATGTTGGGGCGAAAAGCATTGAAGGCAAACTAGAGAACCGATTTCCACAGACAGGTGTGGAGCCTATGTGCTAATAGCCAACGCATAGCCCCACGGGGTGGAGAAAGGGGCAAACAGCAAGCTTCGAATAAGAGATGCTCAGCTTAGACCTAGTGTTTCG")
# for kmer in result:
#     print(kmer)
